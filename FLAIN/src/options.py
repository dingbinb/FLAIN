import torch
import argparse


def args_parser():
    parser = argparse.ArgumentParser()

    parser.add_argument('--data', type=str, default='fmnist',
                        help="dataset we want to train on")

    parser.add_argument('--num_agents', type=int, default=50,
                        help="number of agents: K")

    parser.add_argument('--backdoor_frac', type=float, default=0.2,
                        help="fraction of backdoor agents")

    parser.add_argument('--train_rounds', type=int, default=150,
                        help="number of communication rounds:R")

    parser.add_argument('--local_ep', type=int, default=2,
                        help="number of local epochs:E")

    parser.add_argument('--server_lr', type=float, default=1,
                        help='general aggregation server learning rate')

    parser.add_argument('--base_class', type=int, default=0,
                        help="base class for backdoor attack")

    parser.add_argument('--target_class', type=int, default=5,
                        help="target class for backdoor attack")

    parser.add_argument('--poison_frac', type=float, default=0.2,
                        help="fraction of dataset to corrupt for backdoor attack")

    parser.add_argument('--trigger_type', type=str, default='CBA',
                        help="shape of trigger")

    parser.add_argument('--data_distribution', type=str, default='non_iid',
                        choices=['iid','non_iid'],
                        help="distribution of data between agents")

    parser.add_argument('--alpha', type=float, default=0.5,
                        help="dirichlet series generating function")

    parser.add_argument('--aux_samples', type=int, default=80,
                        help="number of samples per class in the auxiliary dataset")

    parser.add_argument('--defense', type=str, default='fedavg',
                        choices=['fedavg', 'krum', 'median', 'rlr', 'fltrust', 'multi_metrics'],
                        help="defense methods")

    parser.add_argument('--num_classes', type=int, default=10,
                        help="number of classes in the dataset")

    parser.add_argument('--class_per_agent', type=int, default=10,
                        help="number of classes each client has")

    parser.add_argument('--agent_frac', type=float, default=0.5,
                        help="fraction of agents per round:C")

    parser.add_argument('--bs', type=int, default=256,
                        help="local batch size: B")

    parser.add_argument('--snap', type=int, default=1,
                        help="do inference in every num of snap rounds")

    parser.add_argument('--num_workers', type=int, default=0,
                        help="num of workers for multithreading")

    parser.add_argument('--device', default=torch.device("cuda:0" if torch.cuda.is_available() else "cpu"),
                        help="To use cuda, set to a specific GPU ID.")

    # snowball settings
    parser.add_argument('--model', default='CNN_FMNIST', type=str)

    parser.add_argument('--ct', default=10, type=int,
                        help='`cluster threshold`, the number of clusters in `BottomUpElection` is <ct> + 1')

    parser.add_argument('--vt', default=0.7, type=float,
                        help='threshold of TopDownElection')

    parser.add_argument('--v_step', default=0.05, type=float,
                        help='step of TopDownElection')

    parser.add_argument('--vae_hidden', default=256, type=int,
                        help='the dimensionality of hidden layer outputs of the encoder and decoder of the VAE')

    parser.add_argument('--vae_latent', default=64, type=int,
                        help='the dimensionality of the latent feature $\mathbf{z}$ generated by the encoder')

    parser.add_argument('--vae_initial', default=270, type=int,
                        help='the number of epochs in initial training')

    parser.add_argument('--vae_tuning', default=30, type=int,
                        help='the number of epochs in tuning')

    args = parser.parse_args()
    return args




